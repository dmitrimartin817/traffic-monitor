My current file structure appears below.  

I am in the process of converting my plugin from procedural to object-oriented using a MVC design pattern. The transition will happen slowly, and it has already started with several class files.  Check my existing code for errors and help me continue making this transition with other classes that make sense.

But first I will share several files in turn.  Proactively consider all shared files and their interconnections as part of the broader plugin architecture, avoiding piecemeal assumptions, redundant suggestions, and conflicting recommendations.  Do not report on your analysis or suggest changes or steps until I tell you.  Confirm you understand, then I will start sharing files one at a time.

traffic-monitor/
│── assets/											# CSS, JS, images
│   ├── css/
│   │   ├── tfcm-admin-style.css					# Wordpress admin interface styles
│   │   ├── index.php								# Silence is golden
│   │
│   ├── js/
│   │   ├── tfcm-admin-script.js					# Wordpress admin interface scripts
│   │   ├── tfcm-client-script.js					# For future frontend scripts like ajax
│   │   ├── index.php								# Silence is golden
│   │
│   ├── index.php									# Silence is golden
│
│── classes/
│   ├── controller/									# Handles logic, decisions, and interactions
│   │   ├── class-tfcm-admin-controller.php			# TFCM_Admin_Controller Handles admin-related functionality
│   │   ├── class-tfcm-assets.php					# TFCM_Assets: Handles script and style enqueueing
│   │   ├── class-tfcm-export-manager.php			# TFCM_Export_Manager: Handles the creation and deletion of export files
│   │   ├── class-tfcm-lifecycle.php				# TFCM_Lifecycle: Handles plugin lifecycle events such as activation, deactivation, and uninstallation.
│   │   ├── class-tfcm-log-controller.php			# TFCM_Log_Controller: Processes request and passes it to database class
│   │   ├── class-tfcm-plugin-links-controller.php	# TFCM_Plugin_Links_Controller: Handles plugin action links and meta links in the WordPress Plugins page
│   │   ├── class-tfcm-request-controller.php		# TFCM_Request_Controller: Determines what to log and then call logging class
│   │   ├── class-tfcm-request-abstract.php			# TFCM_Request_Abstract: Sets shared request properties and methods
│   │   ├── class-tfcm-request-ajax.php				# TFCM_Request_Ajax: Extends TFCM_Request_Abstract to handle AJAX requests
│   │   ├── class-tfcm-request-http.php				# TFCM_Request_Http: Extends TFCM_Request_Abstract to handle HTTP requests
│   │   ├── index.php								# Silence is golden
│   │
│   ├── model/										# Data structures and database interactions
│   │   ├── class-tfcm-database.php					# Handles database schema management
│   │   ├── index.php								# Silence is golden
│   │
│   ├── view/										# Displays data in the WordPress admin panel
│   │   ├── class-tfcm-help-tabs.php				# TFCM_Help_Tabs: 
│   │   ├── class-tfcm-log-table					# TFCM_Log_Table: Extends WP_List_Table to display log data in an admin table
│   │   ├── class-tfcm-view.php						# TFCM_View: Handles admin notices
│   │   ├── index.php								# Silence is golden
│   │
│   ├── index.php									# Silence is golden
│
│── exports/										# CSV and JSON export file(s)
│   ├── index.php									# Silence is golden
│
│── private/										# Instructions, specifications, roadmap, unused snippets, etc.
│   ├── index.php									# Silence is golden
│
│── vendor/											# Dependancies
│   ├── composer/									# PHP User Agent Parser depends on this
│   ├── donatj/										# PHP User Agent Parser
│   ├── autoload.php								# PHP User Agent Parser depends on this
│
├── .gitattributes
├── .gitignore
├── composer.json									# Need in case of PHP User Agent Parser update
├── composer.lock									# Need in case of PHP User Agent Parser update
├── index.php										# Silence is golden
├── LICENSE											# GNU v2
├── readme.md										# Github readme
├── readme.txt										# Wordpress readme
│── traffic-monitor.php								# Main plugin file




help me modify or extend my existing code to perform these steps so that cached pages can be logged using ajax

When an HTTP request for an uncached page is recieved by PHP:
	Log the request to the database using existing code
	Generate a unique nonce.
	Store the nonce in a transient for 60 seconds.
	Embed the nonce in the JavaScript sent with the page.
When the page load on the client, the JavaScript:
	gets client ip via https://api.ipify.org then
	sends an ajax request back with post values containing the nonce, ip, and window.location.href
If the nonce exists in the transient, skip logging (request was already logged).
If the nonce is missing, the page was cached, so log the AJAX request with TFCM_Request_Ajax where
	request_time = current_time( 'mysql' )
	request_type = 'AJAX'
	request_url = $_POST window.location.href
	method = '' # can't use $_SERVER['REQUEST_METHOD'] because it reflects the ajax request not the original http request
	referer_url = $_SERVER['HTTP_REFERER']
	user_role = TFCM_Request_Abstract::get_user_role() # will this always be "Visitor"?
	ip_address = $_POST  ip
	host = $_SERVER['HTTP_HOST']
	device = parsed from $_SERVER['HTTP_USER_AGENT']
	operating_system = parsed from $_SERVER['HTTP_USER_AGENT']
	browser = parsed from $_SERVER['HTTP_USER_AGENT']
	browser_version = parsed from $_SERVER['HTTP_USER_AGENT']
	user_agent = $_SERVER['HTTP_USER_AGENT']
	origin = $_SERVER['HTTP_ORIGIN']
	accept = '' # can't use $_SERVER['HTTP_ACCEPT'] because it reflects the ajax request not the original http request
	accept_encoding = $_SERVER['HTTP_ACCEPT_ENCODING']
	accept_language = $_SERVER['HTTP_ACCEPT_LANGUAGE']
	content_type =  '' # can't use $_SERVER['CONTENT_TYPE'] because it reflects the ajax request not the original http request
	connection_type =  '' # can't use $_SERVER['HTTP_CONNECTION'] because it reflects the ajax request not the original http request
	cache_control =  '' # can't use $_SERVER['HTTP_CACHE_CONTROL'] because it reflects the ajax request not the original http request
	

tfcm_ip_addresses
	id INT UNSIGNED AUTO_INCREMENT,
	ip_address VARCHAR(45) UNIQUE NOT NULL DEFAULT '0.0.0.0',
	country VARCHAR(2), -- will require an API call (future feature)
	asn VARCHAR(20), -- will require an API call (future feature)
	first_seen TIMESTAMP NOT NULL,
    last_seen TIMESTAMP NOT NULL,
    times_seen BIGINT UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY ip_address (ip_address)

tfcm_user_agents
	id INT UNSIGNED AUTO_INCREMENT,
	user_agent VARCHAR(512) UNIQUE NOT NULL DEFAULT 'missing',
	device VARCHAR(50), -- PHP User Agent Parser, may be null if not present?
	operating_system VARCHAR(255), -- PHP User Agent Parser, may be null if not present?
	browser VARCHAR(128), -- PHP User Agent Parser, may be null if not present?
	browser_version VARCHAR(50), -- PHP User Agent Parser, may be null if not present?
	first_seen TIMESTAMP NOT NULL,
    last_seen TIMESTAMP NOT NULL,
    times_seen BIGINT UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY user_agent (user_agent)

tfcm_fingerprints
	id INT UNSIGNED AUTO_INCREMENT,
	ip_id INT UNSIGNED NOT NULL, -- if IP is missing, this will contain id field in tfcm_ip_addresses table where ip_address = '0.0.0.0'
    user_agent_id INT UNSIGNED NOT NULL, -- if User Agent is missing, this will contain id field in tfcm_user_agents table where user_agent = 'missing'
	fingerprint_hash BINARY(32) UNIQUE NOT NULL,  -- SHA-256 hash of (IP + User-Agent)
	first_seen TIMESTAMP NOT NULL,
    last_seen TIMESTAMP NOT NULL,
    times_seen BIGINT UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY ip_id (ip_id),
    KEY user_agent_id (user_agent_id),
    KEY fingerprint_hash (fingerprint_hash)

tfcm_requested_pages - Stores requested page URLs without query strings for better analysis.
	id INT UNSIGNED AUTO_INCREMENT,
	page_path VARCHAR(255) UNIQUE NOT NULL DEFAULT '', -- request_url relative path only, no domain or query string, home page may equal ''
	first_requested TIMESTAMP NOT NULL,
    last_requested TIMESTAMP NOT NULL,
    times_requested BIGINT UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY page_url (page_url)
	
tfcm_referrer_pages - Stores only the base URL of referrers (without query strings).
	id INT UNSIGNED AUTO_INCREMENT,
	domain VARCHAR(255) NOT NULL DEFAULT '', -- referer_url without path or query string, if missing will equal '' which is not a valid domain
	path VARCHAR(255), -- referer_url without domain or query string
	first_requested TIMESTAMP NOT NULL,
    last_requested TIMESTAMP NOT NULL,
    times_requested BIGINT UNSIGNED NOT NULL,
	PRIMARY KEY (id),
	KEY referrer_url (referrer_url)
	
tfcm_request_log - Stores references to the above tables and logs request-specific data.
	id INT UNSIGNED AUTO_INCREMENT,
	request_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	request_type VARCHAR(7),
	page_id INT UNSIGNED NOT NULL, -- from tfcm_requested_pages table
	page_query VARCHAR(255), -- query string of page requested
	disallowed TINYINT(1), -- if tfcm_requested_pages(page_url) is disallowed in robots.txt  (future feature?)
	method VARCHAR(10) DEFAULT 'GET',
	referer_id INT UNSIGNED NOT NULL, -- from tfcm_referrer_pages table, if request does nott include referer this will contain id field in tfcm_referrer_pages table where domain = ''
	referer_query VARCHAR(255), -- query string of referer_url
	user_role VARCHAR(50),
	fingerprint_id INT UNSIGNED NOT NULL, -- from tfcm_fingerprints table,
	session_id_hash BINARY(32), -- for clickfraud detection, hashed for security
	host VARCHAR(255),
	origin VARCHAR(255),
	accept VARCHAR(255),
	accept_encoding VARCHAR(255),
	accept_language VARCHAR(255),
	content_type VARCHAR(255),
	connection_type VARCHAR(50),
	cache_control VARCHAR(255),
	status_code SMALLINT,
	PRIMARY KEY (id),
	KEY fingerprint_id (fingerprint_id),
    KEY page_id (page_id),
    KEY referer_id (referer_id),
    KEY request_time (request_time)

# Primary Request Data
Date (request_time)
Type (request_type)
Page Requested (request_url)
	page_query VARCHAR(255), -- query string of page requested
	disallowed TINYINT(1), -- if tfcm_requested_pages(page_url) is disallowed in robots.txt  (future feature?)
Method (method)
Prior Page (referer_url)
	referer_query VARCHAR(255), -- query string of referer_url
	session_id_hash BINARY(32), -- for clickfraud detection, hashed for security

# User Information
User Role (user_role)
IP Address (ip_address)
Host (host)

# Device Information
Device (device)
System (operating_system)
Browser (browser)
Browser Version (browser_version)
User Agent (user_agent)

# Other Headers
Origin (origin)
MIME (accept)
Compression (accept_encoding)
Language (accept_language)
Media Type (content_type)
Connection (connection_type)
Caching (cache_control)

# Response Data
Status Code (status_code)

After making those changes, I'll begin marketing the plugin and developing a system to charge users.  At that point, the plugin will be available as a free trial that will log 5,000 page requests before users will need to pay to continue using it.  At that point they will be charged based upon how many requests per month the plugin logs and which tier that number falls within.  The base price per month will start very low but increases as more features are added. For example, pricing will start something like this: 

Tier Cost and Max Page Requests
$1	1,000
$2	4,000
$4	13,000
$8	40,000
$16	121,000
$32	364,000
$64	1,093,000

I have a roadmap of additional features planned for Traffic Monitor that do not include advance features like bot blocking and click fraud protection or .  Once the planned features are implemented, I'll decide whether to include these advanced features or fork the project to create a click fraud plugin and a bot blocking plugin (in that order).  I don't intend on ever competing with security and analytics plugins.

I find proceedural code and relational databases easier to understand and maintain.  All coding must follow current WordPress standards.  I am open to modifications to conform with OOP, Namespaces, Traits, Design Patterns, and SOLID principles ONLY if there are the solve problems that must be addressed.  

I will share each required file in turn.  Proactively consider all shared files and their interconnections as part of the broader plugin architecture, avoiding piecemeal assumptions, redundant suggestions, and conflicting recommendations. Every directory has a blank index.php file for security.  Don't report on your analysis or start suggesting changes until I'm done sharing all files!  Here is the main file:



# Primary Request Data,,,,
Column Label, 		Database Field Name,	HTTP Headers on Uncached Pages, 				AJAX Headers or Post Values,
Date, 				request_time, 			current_time( 'mysql' ),						current_time( 'mysql' )**,
Type, 				request_type, 			TFCM_Request_Abstract::get_request_type(),		TFCM_Request_Abstract::get_request_type()**,
Page Requested, 	request_url, 			$_SERVER['REQUEST_URI'], 						window.location.href*,
Method, 			method, 				$_SERVER['REQUEST_METHOD'],						*,
Prior Page, 		referer_url, 			$_SERVER['HTTP_REFERER'], 						$_SERVER['HTTP_REFERER'] (document.referrer not needed),

# User Information,,,,
User Role, 			user_role, 				TFCM_Request_Abstract::get_user_role(),			TFCM_Request_Abstract::get_user_role()**
IP Address, 		ip_address, 			$_SERVER['HTTP_X_FORWARDED_FOR/REMOTE_ADDR'],	$_POST storing ip from https://api.ipify.org,
Host, 				host,  					$_SERVER['HTTP_HOST'],							$_SERVER['HTTP_HOST'],

# Device Information (parsed),,,,
Device, 			device, 				$_SERVER['HTTP_USER_AGENT'], 					$_SERVER['HTTP_USER_AGENT'] (navigator.userAgent not needed),
System, 			operating_system, 		$_SERVER['HTTP_USER_AGENT'], 					$_SERVER['HTTP_USER_AGENT'] (navigator.userAgent not needed),
Browser, 			browser, 				$_SERVER['HTTP_USER_AGENT'], 					$_SERVER['HTTP_USER_AGENT'] (navigator.userAgent not needed),
Browser Version,	browser_version, 		$_SERVER['HTTP_USER_AGENT'], 					$_SERVER['HTTP_USER_AGENT'] (navigator.userAgent not needed),
User Agent, 		user_agent, 			$_SERVER['HTTP_USER_AGENT'], 					$_SERVER['HTTP_USER_AGENT'] (navigator.userAgent not needed),

# Other Headers,,,,
Origin, 			origin, 				$_SERVER['HTTP_ORIGIN'], 						$_SERVER['HTTP_ORIGIN'] (window.location.origin not needed),
MIME, 				accept, 				$_SERVER['HTTP_ACCEPT'],						*,
Compression, 		accept_encoding, 		$_SERVER['HTTP_ACCEPT_ENCODING'],				$_SERVER['HTTP_ACCEPT_ENCODING']**,
Language, 			accept_language, 		$_SERVER['HTTP_ACCEPT_LANGUAGE'],				$_SERVER['HTTP_ACCEPT_LANGUAGE']**,
Media Type, 		content_type, 			$_SERVER['CONTENT_TYPE'],						*,
Connection, 		connection_type, 		$_SERVER['HTTP_CONNECTION'],					*,
Caching, 			cache_control, 			$_SERVER['HTTP_CACHE_CONTROL'],					*,

# Response Data,,,,
Status Code, 		status_code, 			http_response_code(), 200,
